package com.joybean.cryptocurrency.blockchain;



import java.util.HashSet;
import java.util.Set;

public class TxHandler {
    private UTXOPool utxoPool;

    /**
     * Creates a public ledger whose current UTXOPool (collection of unspent transaction outputs) is
     * {@code utxoPool}. This should make a copy of utxoPool by using the UTXOPool(UTXOPool uPool)
     * constructor.
     */
    public TxHandler(UTXOPool utxoPool) {
        this.utxoPool = new UTXOPool(utxoPool);
    }

    /**
     * @return true if:
     * (1) all outputs claimed by {@code tx} are in the current UTXO pool,
     * (2) the signatures on each input of {@code tx} are valid,
     * (3) no UTXO is claimed multiple times by {@code tx},
     * (4) all of {@code tx}s output values are non-negative, and
     * (5) the sum of {@code tx}s input values is greater than or equal to the sum of its output
     * values; and false otherwise.
     */
    public boolean isValidTx(Transaction tx) {
        double outputVal = 0;
        double inputVal = 0;
        Set<UTXO> utxoSet = new HashSet<>();
        for (int i = 0; i < tx.numInputs(); i++) {
            Transaction.Input txInput = tx.getInput(i);
            UTXO preUtxo = new UTXO(txInput.prevTxHash, txInput.outputIndex);
            //avoid double spending
            if (!utxoSet.add(preUtxo)) {
                return false;
            }
            Transaction.Output preOutput = utxoPool.getTxOutput(preUtxo);
            //Maybe utxo had been removed from UTXOPool while handling previous transaction
            if (preOutput == null) {
                return false;
            }
            //Signature in current Transaction.Input is generated by private key of current sender.
            //e.g. current transaction is ALICE--->BOB,then the signature in this transaction must be ALICE's signature.
            //For verifying signature,we must use previous Transaction.Output.address for public key of current sender.
            if (!Crypto.verifySignature(preOutput.address, tx.getRawDataToSign(i), txInput.signature)) {
                return false;
            }
            inputVal += preOutput.value;
        }
        for (int i = 0; i < tx.numOutputs(); i++) {
            Transaction.Output txOutput = tx.getOutput(i);
            if (txOutput.value < 0) {
                return false;
            }
            outputVal += txOutput.value;
        }
        return inputVal >= outputVal;
    }

    /**
     * Handles each epoch by receiving an unordered array of proposed transactions, checking each
     * transaction for correctness, returning a mutually valid array of accepted transactions, and
     * updating the current UTXO pool as appropriate.
     */
    public Transaction[] handleTxs(Transaction[] possibleTxs) {
        Set<Transaction> result = new HashSet<>();
        boolean f;
        //possibleTxs may contains transactions whose input depend on another transaction among possibleTxs rather than in UTXOPool
        do {
            f = false;
            for (Transaction tx : possibleTxs) {
                if (result.contains(tx)) {
                    continue;
                }
                if (isValidTx(tx)) {
                    f = true;
                    result.add(tx);
                    for (int i = 0; i < tx.numInputs(); i++) {
                        Transaction.Input txInput = tx.getInput(i);
                        //Remove utxo already been spent from UTXOPool to avoid double spending
                        utxoPool.removeUTXO(new UTXO(txInput.prevTxHash, txInput.outputIndex));
                    }
                    for (int i = 0; i < tx.numOutputs(); i++) {
                        Transaction.Output txOutput = tx.getOutput(i);
                        //Add new utxo output of valid transaction to UTXOPool
                        utxoPool.addUTXO(new UTXO(tx.getHash(), i), txOutput);
                    }
                }
            }
        } while (f);
        return result.toArray(new Transaction[result.size()]);
    }


    public UTXOPool getUTXOPool() {
        return utxoPool;
    }

}
